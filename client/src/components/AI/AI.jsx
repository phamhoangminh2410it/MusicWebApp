//import React from 'react'
import { useState } from "react";
import "@chatscope/chat-ui-kit-styles/dist/default/styles.min.css";
import "./AI.scss"

import {
  MainContainer,
  ChatContainer,
  Message,
  MessageList,
  MessageInput,
  TypingIndicator,
} from "@chatscope/chat-ui-kit-react";

const AI = () => {
    const [thinking, setThinking] = useState(false);
    const [isOpen, setIsOpen] = useState(false);
    const [messages, setMessages] = useState([
        {
            message: "Xin ch√†o! \nM√¨nh l√† tr·ª£ l√Ω AI t·ª´ MinMusic.",
            sender: "Gemini",
        },
    ]);

    const handleSend = async (message) => {
        const newMessage = {
            message: message,
            sender: "user",
            direction: "outgoing",
        };

        const newMessages = [...messages, newMessage]; // all the old messages , + new message

        // update the messages useState
        setMessages(newMessages);

        // Setting a typing indicator (chatgpt is thinking)
        setThinking(true);

        // Process the message to CHATGPT (and wait for response )
        processMessageToChatGPT(newMessages);
    };

    async function processMessageToChatGPT(chatMessages) {
        const latestMessage = chatMessages[chatMessages.length - 1];
        
        // Context about the songs we know
        const context = `Th√¥ng tin v·ªÅ b√†i h√°t:
        S∆°n T√πng MTP: Ch·∫°y Ngay ƒêi, Ch√∫ng ta c·ªßa t∆∞∆°ng lai, H√£y Trao cho anh, Mu·ªôn r·ªìi sao c√≤n
        Wowy: L√™n thi√™n ƒë√†ng`;

        try {
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                    "X-goog-api-key": "AIzaSyBUz9Ykz1TOuWj93isYNDawFS5qDdN4iyw"
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: `${context}\n\nV·ªõi vai tr√≤ l√† tr·ª£ l√Ω AI c·ªßa MinMusic, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau:\n${latestMessage.message}`
                        }]
                    }]
                })
            });

            const data = await response.json();
            console.log("Gemini response:", data); // Debug log

            if (data.candidates && data.candidates[0] && data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts[0].text) {
                setMessages([
                    ...chatMessages,
                    {
                        message: data.candidates[0].content.parts[0].text,
                        sender: "Gemini"
                    }
                ]);
            } else {
                console.error("Unexpected response structure:", data);
                setMessages([
                    ...chatMessages,
                    {
                        message: "Xin l·ªói, c√≥ l·ªói x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ AI. Vui l√≤ng th·ª≠ l·∫°i.",
                        sender: "Gemini"
                    }
                ]);
            }
        } catch (error) {
            console.error("Error details:", error);
            setMessages([
                ...chatMessages,
                {
                    message: "Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau.",
                    sender: "Gemini"
                }
            ]);
        }
        setThinking(false);

    }

    return (
        <>
            <div className="chat-bubble" onClick={() => setIsOpen(!isOpen)}>
                <img src="/src/img/logo.svg" alt="Chat" />
            </div>
            
            <div className={`chat-container ${!isOpen ? 'hidden' : ''}`}>
                <div className="chat-header">
                    <div className="avatar">
                        ü§ñ
                    </div>
                    <div className="header-text">
                        <h2>Chatbot MinMusic</h2>
                        <p>Tr·ª£ l√Ω AI</p>
                    </div>
                </div>
                <MainContainer>
                    <ChatContainer>
                        <MessageList
                            typingIndicator={
                                thinking ? (
                                    <TypingIndicator content="wait a moment" />
                                ) : null
                            }
                        >
                            {messages.map((message, i) => {
                                return <Message key={i} model={message} />;
                            })}
                        </MessageList>
                        <MessageInput
                            placeholder="N√≥i chuy·ªán v·ªõi Chatbot MinMusic"
                            onSend={handleSend}
                        />
                    </ChatContainer>
                </MainContainer>
            </div>
        </>
    )
}

export default AI